{
    // Scikit-learn anomaly detection and outlier detection models
    "One-Class SVM": {
        "prefix": "sk-anomaly-one-class-svm",
        "description": "Create and fit One-Class Support Vector Machine anomaly detection model",
        "body": [
            "#",
            "# create and fit One-Class Support Vector Machine anomaly detection model:",
            "#",
            "# references:",
            "# https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.make_pipeline.html",
            "# https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html",
            "# https://scikit-learn.org/stable/modules/generated/sklearn.svm.OneClassSVM.html",
            "#",
            "from sklearn.pipeline import make_pipeline",
            "from sklearn.preprocessing import StandardScaler",
            "from sklearn.svm import OneClassSVM",
            "",
            "${1:estimator_one_class_svm} = make_pipeline(",
            "    StandardScaler(),",
            "    OneClassSVM(",
            "       kernel='${2|rbf,linear,poly,sigmoid|}',",
            "       gamma='${3|scale,auto|}',",
            "       nu=${4:0.5},",
            "       shrinking=${5|True,False|}",
            "    )",
            ")",
            "$1.fit(X=${6:X})",
            "$0"
        ]
    },
    "One-Class SVM with SGD": {
        "prefix": "sk-anomaly-one-class-svm-sgd",
        "description": "Create and fit One-Class Support Vector Machine with Stochastic Gradient Descent for anomaly detection",
        "body": [
            "#",
            "# create and fit One-Class SVM with Stochastic Gradient Descent for anomaly detection:",
            "#",
            "# references:",
            "# https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.make_pipeline.html",
            "# https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html",
            "# https://scikit-learn.org/stable/modules/generated/sklearn.kernel_approximation.Nystroem.html",
            "# https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.SGDOneClassSVM.html",
            "#",
            "from sklearn.pipeline import make_pipeline",
            "from sklearn.preprocessing import StandardScaler",
            "from sklearn.kernel_approximation import Nystroem",
            "from sklearn.linear_model import SGDOneClassSVM",
            "",
            "${1:estimator_one_class_svm_sgd} = make_pipeline(",
            "    StandardScaler(),",
            "    Nystroem(",
            "       kernel='${2|rbf,linear,poly,sigmoid|}',",
            "       gamma='${3|scale,auto|}',",
            "       n_components=${4:100},",
            "       random_state=${5:${RANDOM}}",
            "    ),",
            "    SGDOneClassSVM(",
            "       nu=${6:0.5},",
            "       fit_intercept=${7|True,False|},",
            "       max_iter=${8:1000},",
            "       shuffle=${9|True,False|},",
            "       random_state=$5,",
            "       learning_rate='${10|optimal,constant,invscaling,adaptive|}',",
            "       eta0=${11:0.0}",
            "    )",
            ")",
            "$1.fit(X=${12:X})",
            "$0"
        ]
    },
    "Local Outlier Factor": {
        "prefix": "sk-anomaly-local-outlier-factor",
        "description": "Create and fit Local Outlier Factor anomaly detection model",
        "body": [
            "#",
            "# create and fit Local Outlier Factor anomaly detection model:",
            "#",
            "# references:",
            "# https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.make_pipeline.html",
            "# https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html",
            "# https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.LocalOutlierFactor.html",
            "#",
            "from sklearn.pipeline import make_pipeline",
            "from sklearn.preprocessing import StandardScaler",
            "from sklearn.neighbors import LocalOutlierFactor",
            "",
            "${1:estimator_lof} = make_pipeline(",
            "    StandardScaler(),",
            "    LocalOutlierFactor(",
            "        n_neighbors=${2:20},",
            "        algorithm='${3|auto,ball_tree,kd_tree,brute|}',",
            "        leaf_size=${4:30},",
            "        metric='${5|minkowski,euclidean,manhattan,chebyshev,canberra,braycurtis,cosine|}',",
            "        p=${6:2},",
            "        contamination='${7:auto}',",
            "        novelty=${8|True,False|}",
            "    )",
            ")",
            "$1.fit(X=${9:X})",
            "$0"
        ]
    },
    "Isolation Forest": {
        "prefix": "sk-anomaly-isolation-forest",
        "description": "Create and fit Isolation Forest anomaly detection model",
        "body": [
            "#",
            "# create and fit Isolation Forest anomaly detection model:",
            "#",
            "# reference:",
            "# https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.IsolationForest.html",
            "#",
            "from sklearn.ensemble import IsolationForest",
            "",
            "${1:estimator_isolation_forest} = IsolationForest(",
            "    n_estimators=${2:100},",
            "    max_samples=${3:'auto'},",
            "    contamination=${4:'auto'},",
            "    max_features=${5:1.0},",
            "    bootstrap=${6|False,True|},",
            "    random_state=${7:42}",
            ")",
            "$1.fit(X=${8:X})",
            "$0"
        ]
    },
    "Elliptic Envelope": {
        "prefix": "sk-anomaly-elliptic-envelope",
        "description": "Create and fit Elliptic Envelope (Robust Covariance) anomaly detection model",
        "body": [
            "#",
            "# create and fit Elliptic Envelope (Robust Covariance) anomaly detection model:",
            "#",
            "# references:",
            "# https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.make_pipeline.html",
            "# https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html",
            "# https://scikit-learn.org/stable/modules/generated/sklearn.covariance.EllipticEnvelope.html",
            "#",
            "from sklearn.pipeline import make_pipeline",
            "from sklearn.preprocessing import StandardScaler",
            "from sklearn.covariance import EllipticEnvelope",
            "",
            "${1:estimator_elliptic_envelope} = make_pipeline(",
            "    StandardScaler(),",
            "    EllipticEnvelope(",
            "       store_precision=${2|True,False|},",
            "       assume_centered=${3|False,True|},",
            "       support_fraction=${4:None},",
            "       contamination=${5:0.1},",
            "       random_state=${6:${RANDOM}}",
            "    )",
            ")",
            "$1.fit(X=${7:X})",
            "$0"
        ]
    },
    "DBSCAN for Anomaly Detection": {
        "prefix": "sk-anomaly-dbscan",
        "description": "Create and fit DBSCAN for anomaly detection",
        "body": [
            "#",
            "# use DBSCAN clustering for anomaly detection:",
            "#",
            "# references:",
            "# https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.make_pipeline.html",
            "# https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html",
            "# https://scikit-learn.org/stable/modules/generated/sklearn.cluster.DBSCAN.html",
            "#",
            "from sklearn.pipeline import make_pipeline",
            "from sklearn.preprocessing import StandardScaler",
            "from sklearn.cluster import DBSCAN",
            "",
            "${1:estimator_dbscan} = make_pipeline(",
            "    StandardScaler(),",
            "    DBSCAN(",
            "        eps=${2:0.5},",
            "        min_samples=${3:5},",
            "        metric='${4|euclidean,manhattan,minkowski,chebyshev,canberra,braycurtis,cosine|}',",
            "        algorithm='${5|auto,ball_tree,kd_tree,brute|}',",
            "        leaf_size=${6:30}",
            "    )",
            ")",
            "$1.fit(X=${7:X})",
            "$0"
        ]
    },
    "Predict Outlier Class": {
        "prefix": "sk-anomaly-predict",
        "description": "Predict outlier class using a fitted estimator",
        "body": [
            "#",
            "# predict outlier class (-1 for outliers, 1 for inliers):",
            "#",
            "$2_$1_class = ${1:estimator}.predict(X=${2:X})",
            "$0"
        ]
    },
    "Predict Outlier Score": {
        "prefix": "sk-anomaly-score",
        "description": "Predict outlier score using a fitted estimator",
        "body": [
            "#",
            "# predict outlier score (-ve for outliers, +ve for inliers):",
            "#",
            "$2_$1_score = ${1:estimator}.decision_function(X=${2:X})",
            "$0"
        ]
    }
}
