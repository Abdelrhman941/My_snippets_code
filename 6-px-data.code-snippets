{
    // Plotly Express data reading and loading utilities
    "Read CSV": {
        "prefix": "px-read-csv",
        "description": "Read (.csv) file into pandas data frame and report info",
        "body": [
            "import pandas as pd",
            "${1:df} = pd.read_csv('${2:data.csv}')",
            "print(f'Shape: {$1.shape}')",
            "print(f'Columns: {list($1.columns)}')",
            "print(f'Data types:\\n{$1.dtypes}')",
            "print(f'Missing values:\\n{$1.isnull().sum()}')",
            "$1.head()",
            "$0"
        ]
    },
    "Read Excel": {
        "prefix": "px-read-excel",
        "description": "Read (.xlsx) file into pandas data frame and report info",
        "body": [
            "import pandas as pd",
            "${1:df} = pd.read_excel('${2:data.xlsx}')",
            "print(f'Shape: {$1.shape}')",
            "print(f'Columns: {list($1.columns)}')",
            "print(f'Data types:\\n{$1.dtypes}')",
            "print(f'Missing values:\\n{$1.isnull().sum()}')",
            "$1.head()",
            "$0"
        ]
    },
    "Read Feather": {
        "prefix": "px-read-feather",
        "description": "Read (.feather) file into pandas data frame and report info",
        "body": [
            "import pandas as pd",
            "${1:df} = pd.read_feather('${2:data.feather}')",
            "print(f'Shape: {$1.shape}')",
            "print(f'Columns: {list($1.columns)}')",
            "print(f'Data types:\\n{$1.dtypes}')",
            "print(f'Missing values:\\n{$1.isnull().sum()}')",
            "$1.head()",
            "$0"
        ]
    },
    "Read GeoJSON": {
        "prefix": "px-read-geojson",
        "description": "Read (.geojson) file into dictionary and print contents",
        "body": [
            "import json",
            "with open('${1:data.geojson}', 'r') as f:",
            "    ${2:geojson_data} = json.load(f)",
            "print(f'Type: {type($2)}')",
            "print(f'Keys: {list($2.keys()) if isinstance($2, dict) else \"Not a dictionary\"}')",
            "if 'features' in $2:",
            "    print(f'Number of features: {len($2[\"features\"])}')",
            "    if $2['features']:",
            "        print(f'First feature keys: {list($2[\"features\"][0].keys())}')",
            "$0"
        ]
    },
    "Read Parquet": {
        "prefix": "px-read-parquet",
        "description": "Read (.parquet) file into pandas data frame and report info",
        "body": [
            "import pandas as pd",
            "${1:df} = pd.read_parquet('${2:data.parquet}')",
            "print(f'Shape: {$1.shape}')",
            "print(f'Columns: {list($1.columns)}')",
            "print(f'Data types:\\n{$1.dtypes}')",
            "print(f'Missing values:\\n{$1.isnull().sum()}')",
            "$1.head()",
            "$0"
        ]
    },
    "Read Plotly Figure": {
        "prefix": "px-read-plotly",
        "description": "Create and show a Plotly figure from a definition stored in a JSON (.json) file",
        "body": [
            "import plotly.graph_objects as go",
            "import json",
            "",
            "with open('${1:figure.json}', 'r') as f:",
            "    ${2:fig_dict} = json.load(f)",
            "",
            "${3:fig} = go.Figure($2)",
            "$3.show()",
            "$0"
        ]
    }
}
