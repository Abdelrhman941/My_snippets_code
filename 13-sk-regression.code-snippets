{
    // Scikit-learn regression models and utilities
    "Linear Regression": {
        "prefix": "sk-regress-linear",
        "description": "Create and fit Linear Regression model",
        "body": [
            "from sklearn.linear_model import LinearRegression",
            "",
            "${1:lr_model} = LinearRegression()",
            "$1.fit(${2:X_train}, ${3:y_train})",
            "",
            "# Make predictions",
            "y_pred = $1.predict(${4:X_test})",
            "$0"
        ]
    },
    "Random Forest Regressor": {
        "prefix": "sk-regress-random-forest",
        "description": "Create and fit RandomForestRegressor model",
        "body": [
            "from sklearn.ensemble import RandomForestRegressor",
            "",
            "${1:rf_model} = RandomForestRegressor(",
            "    n_estimators=${2:100},",
            "    max_depth=${3:None},",
            "    random_state=${4:42}",
            ")",
            "$1.fit(${5:X_train}, ${6:y_train})",
            "",
            "# Make predictions",
            "y_pred = $1.predict(${7:X_test})",
            "$0"
        ]
    },
    "Ridge Regression": {
        "prefix": "sk-regress-ridge",
        "description": "Create and fit Ridge Regression model",
        "body": [
            "from sklearn.linear_model import Ridge",
            "",
            "${1:ridge_model} = Ridge(",
            "    alpha=${2:1.0},",
            "    random_state=${3:42}",
            ")",
            "$1.fit(${4:X_train}, ${5:y_train})",
            "",
            "# Make predictions",
            "y_pred = $1.predict(${6:X_test})",
            "$0"
        ]
    },
    "Lasso Regression": {
        "prefix": "sk-regress-lasso",
        "description": "Create and fit Lasso Regression model",
        "body": [
            "from sklearn.linear_model import Lasso",
            "",
            "${1:lasso_model} = Lasso(",
            "    alpha=${2:1.0},",
            "    random_state=${3:42}",
            ")",
            "$1.fit(${4:X_train}, ${5:y_train})",
            "",
            "# Make predictions",
            "y_pred = $1.predict(${6:X_test})",
            "$0"
        ]
    },
    "Gradient Boosting Regressor": {
        "prefix": "sk-regress-gradient-boosting",
        "description": "Create and fit GradientBoostingRegressor model",
        "body": [
            "from sklearn.ensemble import GradientBoostingRegressor",
            "",
            "${1:gb_model} = GradientBoostingRegressor(",
            "    n_estimators=${2:100},",
            "    learning_rate=${3:0.1},",
            "    random_state=${4:42}",
            ")",
            "$1.fit(${5:X_train}, ${6:y_train})",
            "",
            "# Make predictions",
            "y_pred = $1.predict(${7:X_test})",
            "$0"
        ]
    },
    "Support Vector Regressor": {
        "prefix": "sk-regress-svr",
        "description": "Create and fit Support Vector Regressor model",
        "body": [
            "from sklearn.svm import SVR",
            "",
            "${1:svr_model} = SVR(",
            "    kernel='${2|rbf,linear,poly,sigmoid|}',",
            "    C=${3:1.0}",
            ")",
            "$1.fit(${4:X_train}, ${5:y_train})",
            "",
            "# Make predictions",
            "y_pred = $1.predict(${6:X_test})",
            "$0"
        ]
    },
    "Regression Metrics": {
        "prefix": "sk-regress-metrics",
        "description": "Calculate and display regression metrics",
        "body": [
            "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score",
            "import numpy as np",
            "",
            "# Calculate metrics",
            "mse = mean_squared_error(${1:y_test}, ${2:y_pred})",
            "rmse = np.sqrt(mse)",
            "mae = mean_absolute_error($1, $2)",
            "r2 = r2_score($1, $2)",
            "",
            "print(f'Mean Squared Error: {mse:.4f}')",
            "print(f'Root Mean Squared Error: {rmse:.4f}')",
            "print(f'Mean Absolute Error: {mae:.4f}')",
            "print(f'RÂ² Score: {r2:.4f}')",
            "$0"
        ]
    },
    "Polynomial Features": {
        "prefix": "sk-regress-polynomial",
        "description": "Create polynomial features for regression",
        "body": [
            "from sklearn.preprocessing import PolynomialFeatures",
            "from sklearn.linear_model import LinearRegression",
            "from sklearn.pipeline import Pipeline",
            "",
            "${1:poly_model} = Pipeline([",
            "    ('poly', PolynomialFeatures(degree=${2:2})),",
            "    ('linear', LinearRegression())",
            "])",
            "$1.fit(${3:X_train}, ${4:y_train})",
            "",
            "# Make predictions",
            "y_pred = $1.predict(${5:X_test})",
            "$0"
        ]
    }
}
